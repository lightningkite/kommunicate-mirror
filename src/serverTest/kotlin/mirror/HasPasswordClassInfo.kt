//Generated by Lightning Kite's Mirror plugin
//AUTOMATICALLY GENERATED AND WILL BE OVERRIDDEN IF THIS MESSAGE IS PRESENT
package com.lightningkite.mirror.archive.server.security

import com.lightningkite.mirror.archive.database.secure.SecureSuspendMap
import com.lightningkite.mirror.archive.model.Operation
import de.mkammerer.argon2.Argon2Factory
import kotlin.IllegalArgumentException
import com.lightningkite.mirror.info.*
import kotlin.reflect.KClass

@Suppress("RemoveExplicitTypeArguments", "UNCHECKED_CAST", "USELESS_CAST")
object HasPasswordClassInfo: ClassInfo<HasPassword> {

   override val kClass: KClass<HasPassword> = HasPassword::class
   override val modifiers: List<ClassInfo.Modifier> = listOf(ClassInfo.Modifier.Interface)
   override val companion: Any? get() = HasPassword

   override val implements: List<Type<*>> = listOf()

   override val packageName: String = "com.lightningkite.mirror.archive.server.security"
   override val owner: KClass<*>? = null
   override val ownerName: String? = null

   override val name: String = "HasPassword"
   override val annotations: List<AnnotationInfo> = listOf()
   override val enumValues: List<HasPassword>? = null

   

   override val fields:List<FieldInfo<HasPassword, *>> = listOf()

   override fun construct(map: Map<String, Any?>): HasPassword = throw NotImplementedError()

}