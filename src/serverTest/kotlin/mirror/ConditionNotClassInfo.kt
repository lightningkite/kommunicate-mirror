//Generated by Lightning Kite's Mirror plugin
//AUTOMATICALLY GENERATED AND WILL BE OVERRIDDEN IF THIS MESSAGE IS PRESENT
package com.lightningkite.mirror.archive.model

import com.lightningkite.mirror.info.*
import kotlin.reflect.KClass

@Suppress("RemoveExplicitTypeArguments", "UNCHECKED_CAST", "USELESS_CAST")
object ConditionNotClassInfo: ClassInfo<Condition.Not<*>> {

    override val kClass: KClass<Condition.Not<*>> = Condition.Not::class
    override val modifiers: List<ClassInfo.Modifier> = listOf(ClassInfo.Modifier.Data)
    override val companion: Any? get() = null

    override val implements: List<Type<*>> = listOf(Type<com.lightningkite.mirror.archive.model.Condition<Any?>>(com.lightningkite.mirror.archive.model.Condition::class, listOf(TypeProjection(Type<Any?>(Any::class, listOf(), false), TypeProjection.Variance.INVARIANT)), false))

    override val packageName: String = "com.lightningkite.mirror.archive.model"
    override val owner: KClass<*>? = Condition::class
    override val ownerName: String? = "Condition"

    override val name: String = "Not"
    override val annotations: List<AnnotationInfo> = listOf()
    override val enumValues: List<Condition.Not<*>>? = null

    val fieldCondition = FieldInfo<Condition.Not<*>, com.lightningkite.mirror.archive.model.Condition<Any?>>(this, "condition", Type<com.lightningkite.mirror.archive.model.Condition<Any?>>(com.lightningkite.mirror.archive.model.Condition::class, listOf(TypeProjection(Type<Any?>(Any::class, listOf(), false), TypeProjection.Variance.INVARIANT)), false), false, { it.condition as com.lightningkite.mirror.archive.model.Condition<Any?>}, listOf())

    override val fields:List<FieldInfo<Condition.Not<*>, *>> = listOf(fieldCondition)

    override fun construct(map: Map<String, Any?>): Condition.Not<Any?> {
        //Gather variables
        val condition:com.lightningkite.mirror.archive.model.Condition<Any?> = map["condition"] as com.lightningkite.mirror.archive.model.Condition<Any?>
        //Handle the optionals
        
        //Finally do the call
        return Condition.Not<Any?>(
            condition = condition
        )
    }

}