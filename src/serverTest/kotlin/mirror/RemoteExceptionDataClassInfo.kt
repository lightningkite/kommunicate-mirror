//Generated by Lightning Kite's Mirror plugin
//AUTOMATICALLY GENERATED AND WILL BE OVERRIDDEN IF THIS MESSAGE IS PRESENT
package com.lightningkite.kommunicate.mirror

import com.lightningkite.mirror.info.*
import kotlin.reflect.KClass

@Suppress("RemoveExplicitTypeArguments", "UNCHECKED_CAST", "USELESS_CAST")
object RemoteExceptionDataClassInfo: ClassInfo<RemoteExceptionData> {

    override val kClass: KClass<RemoteExceptionData> = RemoteExceptionData::class
    override val modifiers: List<ClassInfo.Modifier> = listOf()
    override val companion: Any? get() = null

    override val implements: List<Type<*>> = listOf()

    override val packageName: String = "com.lightningkite.kommunicate.mirror"
    override val owner: KClass<*>? = null
    override val ownerName: String? = null

    override val name: String = "RemoteExceptionData"
    override val annotations: List<AnnotationInfo> = listOf()
    override val enumValues: List<RemoteExceptionData>? = null

    val fieldType = FieldInfo<RemoteExceptionData, String>(this, "type", Type<String>(String::class, listOf(), false), false, { it.type as String}, listOf())
    val fieldMessage = FieldInfo<RemoteExceptionData, String>(this, "message", Type<String>(String::class, listOf(), false), false, { it.message as String}, listOf())
    val fieldTrace = FieldInfo<RemoteExceptionData, String>(this, "trace", Type<String>(String::class, listOf(), false), false, { it.trace as String}, listOf())
    val fieldData = FieldInfo<RemoteExceptionData, Any?>(this, "data", Type<Any?>(Any::class, listOf(), true), false, { it.data as Any?}, listOf())

    override val fields:List<FieldInfo<RemoteExceptionData, *>> = listOf(fieldType, fieldMessage, fieldTrace, fieldData)

    override fun construct(map: Map<String, Any?>): RemoteExceptionData {
        //Gather variables
        val type:String = map["type"] as String
        val message:String = map["message"] as String
        val trace:String = map["trace"] as String
        val data:Any? = map["data"] as Any?
        //Handle the optionals
        
        //Finally do the call
        return RemoteExceptionData(
            type = type,
            message = message,
            trace = trace,
            data = data
        )
    }

}