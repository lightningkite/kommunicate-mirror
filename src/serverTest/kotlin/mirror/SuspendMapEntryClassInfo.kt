//Generated by Lightning Kite's Mirror plugin
//AUTOMATICALLY GENERATED AND WILL BE OVERRIDDEN IF THIS MESSAGE IS PRESENT
package com.lightningkite.mirror.archive.database

import com.lightningkite.mirror.info.*
import kotlin.reflect.KClass

@Suppress("RemoveExplicitTypeArguments", "UNCHECKED_CAST", "USELESS_CAST")
object SuspendMapEntryClassInfo: ClassInfo<SuspendMap.Entry<*,*>> {

    override val kClass: KClass<SuspendMap.Entry<*,*>> = SuspendMap.Entry::class
    override val modifiers: List<ClassInfo.Modifier> = listOf(ClassInfo.Modifier.Data)
    override val companion: Any? get() = null

    override val implements: List<Type<*>> = listOf(Type<kotlin.collections.Map.Entry<Any?, kotlin.Any>>(kotlin.collections.Map.Entry::class, listOf(TypeProjection(Type<Any?>(Any::class, listOf(), false), TypeProjection.Variance.INVARIANT), TypeProjection(Type<kotlin.Any>(kotlin.Any::class, listOf(), false), TypeProjection.Variance.INVARIANT)), false))

    override val packageName: String = "com.lightningkite.mirror.archive.database"
    override val owner: KClass<*>? = SuspendMap::class
    override val ownerName: String? = "SuspendMap"

    override val name: String = "Entry"
    override val annotations: List<AnnotationInfo> = listOf()
    override val enumValues: List<SuspendMap.Entry<*,*>>? = null

    val fieldKey = FieldInfo<SuspendMap.Entry<*,*>, Any?>(this, "key", Type<Any?>(Any::class, listOf(), false), false, { it.key as Any?}, listOf())
    val fieldValue = FieldInfo<SuspendMap.Entry<*,*>, kotlin.Any>(this, "value", Type<kotlin.Any>(kotlin.Any::class, listOf(), false), false, { it.value as kotlin.Any}, listOf())

    override val fields:List<FieldInfo<SuspendMap.Entry<*,*>, *>> = listOf(fieldKey, fieldValue)

    override fun construct(map: Map<String, Any?>): SuspendMap.Entry<Any?, kotlin.Any> {
        //Gather variables
        val key:Any? = map["key"] as Any?
        val value:kotlin.Any = map["value"] as kotlin.Any
        //Handle the optionals
        
        //Finally do the call
        return SuspendMap.Entry<Any?, kotlin.Any>(
            key = key,
            value = value
        )
    }

}